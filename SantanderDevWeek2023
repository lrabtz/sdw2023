{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyM8XWsJc/b0BJU1x0ji1yM+",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/lrabtz/sdw2023/blob/main/SantanderDevWeek2023\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sdw2023_api_url = 'https://sdw-2023-prd.up.railway.app'"
      ],
      "metadata": {
        "id": "WSc09uXxd60k"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "df = pd.read_csv('santanderdw.csv.txt')\n",
        "user_ids = df['User ID'].tolist()\n",
        "print(user_ids)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Q-0rw_2CeIpf",
        "outputId": "df1be1be-74ac-4439-dbb9-1d58057f3e60"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[4, 5, 6]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import requests\n",
        "import json\n",
        "\n",
        "def get_user(id):\n",
        "  response = requests.get(f'{sdw2023_api_url}/users/{id}')\n",
        "  return response.json() if response.status_code == 200 else None\n",
        "\n",
        "users = [user for id in user_ids if (user := get_user(id)) is not None]\n",
        "print(json.dumps(users, indent=2))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SldTCC6geKVB",
        "outputId": "632ca4e1-d77b-45ed-8efa-c54d50e90187"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "[] import openai\n",
        "\n",
        "    openai.api_key = openai_api_key\n",
        "\n",
        "    def generate_ao_news(user):\n",
        "      completion = openai.ChatCompletion.creat(\n",
        "        model=\"gpt-4\"\n",
        "        messages=[\n",
        "          {\n",
        "              \"role\": \"system\",\n",
        "              \"content\": \"Você é um especialista em marketing bancário.\"\n",
        "          },\n",
        "          {\n",
        "              \"role\": \"user\"\n",
        "              \"content\": f\"Crie uma mensagem para {user['name']}\"\n",
        "          }\n",
        "        ]\n",
        "      )\n",
        "      return completion.choices[0].message.content.strip('\\\"')\n",
        "\n",
        "    for user in users:\n",
        "      news = generate_ai_news(user)\n",
        "      print(news)\n",
        "      user['news'].append({\n",
        "          \"icon\": \"https://digitalinnovationone.github.io/santander-dev-week-2023-api/icons/credit.svg\",\n",
        "          \"description\": news\n",
        "     })"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 140
        },
        "id": "Ye8GvRYQej3d",
        "outputId": "18af27ce-33b0-48ce-8b42-931be5b981e8"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "error",
          "ename": "SyntaxError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-12-64988ceefaff>\"\u001b[0;36m, line \u001b[0;32m8\u001b[0m\n\u001b[0;31m    model=\"gpt-4\"\u001b[0m\n\u001b[0m          ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax. Perhaps you forgot a comma?\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def update_user(user):\n",
        "  response = requests.put(f'{sdw2023_api_url}/users/{user['id']}')\n",
        "  return True if responde.status_code == 200 else False\n",
        "\n",
        "for user in users:\n",
        "  sucess = update_user(user)\n",
        "  print(f\"User {user['name']} updated? {sucess}!\")"
      ],
      "metadata": {
        "id": "FRt9S-FJgXE1"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}